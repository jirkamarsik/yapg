using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace YetAnotherParserGenerator
{
    /// <summary>
    /// The exception that is thrown when the input processed by the lexer/parser duo
    /// is not conforming to the definition of the language.
    /// </summary>
    public class ParsingException : Exception
    {
        /// <summary>
        /// Initializes a new instance of the ParsingException class with a specified error message
        /// and text position information.
        /// </summary>
        /// <param name="message">The message that describes the error.</param>
        /// <param name="lineNumber">The number of the line where the error occured.</param>
        /// <param name="columnNumber">The position within the line where ther error occured.</param>
        public ParsingException(string message, int lineNumber, int columnNumber)
            : base(message)
        {
            this.lineNumber = lineNumber;
            this.columnNumber = columnNumber;
        }

        /// <summary>
        /// Gets the number of the line where the error occured.
        /// </summary>
        public int LineNumber { get { return lineNumber; } }
        private int lineNumber;

        /// <summary>
        /// Gets the position within the line where the error occured.
        /// </summary>
        public int ColumnNumner { get { return columnNumber; } }
        private int columnNumber;
    }

    /// <summary>
    /// The exception that is thrown when the user input is found to be invalid.
    /// </summary>
    public class UserInputException : Exception
    {
        /// <summary>
        /// Initializes a new instance of the UserInputException class.
        /// </summary>
        public UserInputException()
            : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the UserInputException class with a specified error message.
        /// </summary>
        /// <param name="message">The message that describes the error.</param>
        public UserInputException(string message)
            : base(message)
        {
        }

        /// <summary>
        /// Initializes a new instance of the UserInputException class with a specified error message
        /// and a reference to the inner exception that is the cause of this exception.
        /// </summary>
        /// <param name="message">The message that describes the error.</param>
        /// <param name="innerException">The exception that is the cause of the current exception,
        /// or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        public UserInputException(string message, Exception innerException)
            : base(message, innerException)
        {
        }
    }

    /// <summary>
    /// The exception that is thrown when a LALR(1) parser cannot be constructed for the grammar.
    /// </summary>
    public class GrammarException : Exception
    {
        /// <summary>
        /// Initializes a new instance of the GrammarException class.
        /// </summary>
        public GrammarException()
            : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the GrammarException class with a specified error message.
        /// </summary>
        /// <param name="message">The message that describes the error.</param>
        public GrammarException(string message)
            : base(message)
        {
        }
    }

    /// <summary>
    /// The exception that is thrown when there are discrepancies in the grammar's specification.
    /// </summary>
    public class InvalidSpecificationException : Exception
    {
        private IEnumerable<string> messages;

        /// <summary>
        /// Initializes a new instance of the InvalidSpecificationException class with the specified error messages.
        /// </summary>
        /// <param name="messages">The messages that describes the errors.</param>
        public InvalidSpecificationException(IEnumerable<string> messages)
        {
            this.messages = messages;
        }

        /// <summary>
        /// Gets the error and warning messages generated by the procedure interpreting the specification.
        /// </summary>
        public IEnumerable<string> Messages
        { get { return messages; } }

        /// <summary>
        /// Gets the error and warning messages generated by the procedure interpreting the specification
        /// concatenated into one string.
        /// </summary>
        public override string Message
        { get { return string.Join("\r\n", messages.ToArray()); } }
    }
}
