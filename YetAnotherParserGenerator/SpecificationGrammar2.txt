%null VOID

(?m)

HEADER=%header\b
HEADER_CODE=
LEXER=%lexer\b
NULL=%null\b
IDENTIFIER=\w+
REGEXOPTS=\(\?[imnsx\-]+\)
EQUALS==
REGEX=.*
PARSER=%parser\b
START=%start\b
TYPE=%type\b
DOT=\.
LANGLE=\<
RANGLE=\>
DERIVES=::=
CODE=
OR=\|
VOID=\s+
VOID=#.*

%start grammarDef

<grammarDef> ::= <header> <lexer> <parser>;

<header> ::= HEADER HEADER_CODE | ;

<lexer> ::= LEXER <nullDef> <regexOpts> <tokenDefs>;
<nullDef> ::= NULL IDENTIFIER | ;
<regexOpts> ::= REGEXOPTS | ; 
<tokenDefs> ::= <tokenDef> | <tokenDef> <tokenDefs>;
<tokenDef> ::= IDENTIFIER EQUALS REGEX;

<parser> ::= PARSER <startDef> <parserDefs>;
<startDef> ::= START IDENTIFIER;
<parserDefs> ::= <parserDef> | <parserDef> <parserDefs>;
<parserDef> ::= <rule> | <typeAssignment>;
<typeAssignment> ::= TYPE IDENTIFIER <typeName>;
<typeName> ::= IDENTIFIER <specificName>;
<specificName> ::= DOT IDENTIFIER <specificName> | ;

<rule> ::= <nonterminal> DERIVES <expression>;
<expression> ::= <symbolList> CODE | <symbolList> CODE OR <expression>;
<symbolList> ::= <symbol> <symbolList> | ;
<symbol> ::= <nonterminal> | <terminal>;
<nonterminal> ::= LANGLE IDENTIFIER RANGLE;
<terminal> ::= IDENTIFIER;